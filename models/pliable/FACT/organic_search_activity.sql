-- This file was automatically generated by PLIABLE (https://app.pliable.co). 
-- Please do not edit this file directly, as it will be overwritten the next time someone commits their changes in Pliable.

{{ config(materialized="table") }}


with
    stacked as (

        (
            select
                _plb_uuid,
                _plb_loaded_at,
                'gsc_keyword_page_clean' as _plb_source_model,
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."Extract Page"::string is null
                                or "gsc_keyword_page_clean"."Extract Page"::string
                                ::string
                                = ''
                            then null
                            else "gsc_keyword_page_clean"."Extract Page"::string
                        end
                    )
                ) as "Page",
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."DATE"::string is null
                                or "gsc_keyword_page_clean"."DATE"::string::string = ''
                            then null
                            else "gsc_keyword_page_clean"."DATE"::string
                        end
                    )
                ) as "DATE",
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."SEARCH_TYPE"::string is null
                                or "gsc_keyword_page_clean"."SEARCH_TYPE"::string
                                ::string
                                = ''
                            then null
                            else "gsc_keyword_page_clean"."SEARCH_TYPE"::string
                        end
                    )
                ) as "SEARCH_TYPE",
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."DEVICE"::string is null
                                or "gsc_keyword_page_clean"."DEVICE"::string::string
                                = ''
                            then null
                            else "gsc_keyword_page_clean"."DEVICE"::string
                        end
                    )
                ) as "DEVICE",
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."QUERY"::string is null
                                or "gsc_keyword_page_clean"."QUERY"::string::string = ''
                            then null
                            else "gsc_keyword_page_clean"."QUERY"::string
                        end
                    )
                ) as "QUERY",
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."CLICKS"::string is null
                                or "gsc_keyword_page_clean"."CLICKS"::string::string
                                = ''
                            then null
                            else "gsc_keyword_page_clean"."CLICKS"::string
                        end
                    )
                ) as "CLICKS",
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."IMPRESSIONS"::string is null
                                or "gsc_keyword_page_clean"."IMPRESSIONS"::string
                                ::string
                                = ''
                            then null
                            else "gsc_keyword_page_clean"."IMPRESSIONS"::string
                        end
                    )
                ) as "IMPRESSIONS",
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."POSITION"::string is null
                                or "gsc_keyword_page_clean"."POSITION"::string::string
                                = ''
                            then null
                            else "gsc_keyword_page_clean"."POSITION"::string
                        end
                    )
                ) as "POSITION",
                (
                    (
                        case
                            when
                                "gsc_keyword_page_clean"."COUNTRY"::string is null
                                or "gsc_keyword_page_clean"."COUNTRY"::string::string
                                = ''
                            then null
                            else "gsc_keyword_page_clean"."COUNTRY"::string
                        end
                    )
                ) as "COUNTRY"
            from {{ ref("gsc_keyword_page_clean") }} as "gsc_keyword_page_clean"

        )

    ),
    transformed as (

        select
            -- Generate a new deterministic UUID unique to this particular model
            'plb:::m:organic_search_activity::r:' || sha1(_plb_uuid) as _plb_uuid,
            _plb_loaded_at as _plb_loaded_at,
            try_cast(("CLICKS")::string as varchar) as "CLICKS",
            try_cast(("COUNTRY")::string as varchar) as "COUNTRY",
            try_cast(("DATE")::string as date) as "DATE",
            try_cast(("DEVICE")::string as varchar) as "DEVICE",
            try_cast(("IMPRESSIONS")::string as varchar) as "IMPRESSIONS",
            try_cast(("POSITION")::string as varchar) as "POSITION",
            try_cast(("Page")::string as varchar) as "Page",
            try_cast(("QUERY")::string as varchar) as "QUERY",
            try_cast(("SEARCH_TYPE")::string as varchar) as "SEARCH_TYPE"
        from stacked

    ),
    relationship_page_id_options as (
        select distinct
            child._plb_uuid as _plb_uuid, parent._plb_uuid as _plb_foreign_key
        from transformed child
        left join {{ ref("page") }} parent on ((child."Page" = parent."PAGE"))
        where _plb_foreign_key is not null
    ),
    relationship_page_id_resolved as (
        select
            opts._plb_uuid,
            case
                when count(distinct opts._plb_foreign_key) > 1
                then '<AMBIGUOUS>'
                when count(distinct opts._plb_foreign_key) = 1
                then any_value(opts._plb_foreign_key)
                else null
            end as _plb_foreign_key,
            -- Store all the options so the user can easily see what's going on and
            -- resolve it in the UI
            array_agg(opts._plb_foreign_key) as _plb_foreign_key_opts
        from relationship_page_id_options opts
        group by opts._plb_uuid
    ),
    relationship_query_id_options as (
        select distinct
            child._plb_uuid as _plb_uuid, parent._plb_uuid as _plb_foreign_key
        from transformed child
        left join {{ ref("query") }} parent on ((child."QUERY" = parent."QUERY"))
        where _plb_foreign_key is not null
    ),
    relationship_query_id_resolved as (
        select
            opts._plb_uuid,
            case
                when count(distinct opts._plb_foreign_key) > 1
                then '<AMBIGUOUS>'
                when count(distinct opts._plb_foreign_key) = 1
                then any_value(opts._plb_foreign_key)
                else null
            end as _plb_foreign_key,
            -- Store all the options so the user can easily see what's going on and
            -- resolve it in the UI
            array_agg(opts._plb_foreign_key) as _plb_foreign_key_opts
        from relationship_query_id_options opts
        group by opts._plb_uuid
    ),
    all_resolved_relationships as (
        select
            u.*,
            relationship_page_id_resolved._plb_foreign_key as "page_id",
            relationship_query_id_resolved._plb_foreign_key as "query_id"
        from transformed u
        left join
            relationship_page_id_resolved
            on relationship_page_id_resolved._plb_uuid = u._plb_uuid
        left join
            relationship_query_id_resolved
            on relationship_query_id_resolved._plb_uuid = u._plb_uuid
    )

select *
from all_resolved_relationships
where 1 = 1

